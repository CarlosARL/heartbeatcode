{"ast":null,"code":"import React from 'react';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { useAuth } from \"../hooks/useAuth\";\nimport { useTheme } from \"../hooks/useTheme\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport LoginScreen from \"../screens/LoginScreen\";\nimport RegisterScreen from \"../screens/RegisterScreen\";\nimport HomeScreen from \"../screens/HomeScreen\";\nimport PatientListScreen from \"../screens/PatientListScreen\";\nimport AddPatientScreen from \"../screens/AddPatientScreen\";\nimport PatientDetailsScreen from \"../screens/PatientDetailsScreen\";\nimport SettingsScreen from \"../screens/SettingsScreen\";\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nvar Stack = createStackNavigator();\nvar Tab = createBottomTabNavigator();\nvar AuthStack = function AuthStack() {\n  return _jsxs(Stack.Navigator, {\n    screenOptions: {\n      headerShown: false\n    },\n    children: [_jsx(Stack.Screen, {\n      name: \"Login\",\n      component: LoginScreen\n    }), _jsx(Stack.Screen, {\n      name: \"Register\",\n      component: RegisterScreen\n    })]\n  });\n};\nvar MainTabs = function MainTabs() {\n  var _useTheme = useTheme(),\n    theme = _useTheme.theme;\n  return _jsxs(Tab.Navigator, {\n    screenOptions: function screenOptions(_ref) {\n      var route = _ref.route;\n      return {\n        tabBarIcon: function tabBarIcon(_ref2) {\n          var focused = _ref2.focused,\n            color = _ref2.color,\n            size = _ref2.size;\n          var iconName;\n          if (route.name === 'Home') {\n            iconName = focused ? 'home' : 'home-outline';\n          } else if (route.name === 'Patients') {\n            iconName = focused ? 'people' : 'people-outline';\n          } else if (route.name === 'Settings') {\n            iconName = focused ? 'settings' : 'settings-outline';\n          }\n          return _jsx(Icon, {\n            name: iconName,\n            size: size,\n            color: color\n          });\n        }\n      };\n    },\n    tabBarOptions: {\n      activeTintColor: theme.colors.primary,\n      inactiveTintColor: theme.colors.text,\n      style: {\n        backgroundColor: theme.colors.background\n      }\n    },\n    children: [_jsx(Tab.Screen, {\n      name: \"Home\",\n      component: HomeScreen\n    }), _jsx(Tab.Screen, {\n      name: \"Patients\",\n      component: PatientListScreen\n    }), _jsx(Tab.Screen, {\n      name: \"Settings\",\n      component: SettingsScreen\n    })]\n  });\n};\nvar AppNavigator = function AppNavigator() {\n  var _useAuth = useAuth(),\n    user = _useAuth.user,\n    loading = _useAuth.loading;\n  if (loading) {\n    return null;\n  }\n  return _jsx(Stack.Navigator, {\n    screenOptions: {\n      headerShown: false\n    },\n    children: user ? _jsxs(_Fragment, {\n      children: [_jsx(Stack.Screen, {\n        name: \"Main\",\n        component: MainTabs\n      }), _jsx(Stack.Screen, {\n        name: \"AddPatient\",\n        component: AddPatientScreen\n      }), _jsx(Stack.Screen, {\n        name: \"PatientDetails\",\n        component: PatientDetailsScreen\n      })]\n    }) : _jsx(Stack.Screen, {\n      name: \"Auth\",\n      component: AuthStack\n    })\n  });\n};\nexport default AppNavigator;","map":{"version":3,"names":["React","createStackNavigator","createBottomTabNavigator","useAuth","useTheme","Icon","LoginScreen","RegisterScreen","HomeScreen","PatientListScreen","AddPatientScreen","PatientDetailsScreen","SettingsScreen","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Stack","Tab","AuthStack","Navigator","screenOptions","headerShown","children","Screen","name","component","MainTabs","_useTheme","theme","_ref","route","tabBarIcon","_ref2","focused","color","size","iconName","tabBarOptions","activeTintColor","colors","primary","inactiveTintColor","text","style","backgroundColor","background","AppNavigator","_useAuth","user","loading"],"sources":["C:/Users/carlos/Desktop/Heartbeat/heartbeatcode/src/navigation/AppNavigator.js"],"sourcesContent":["import React from 'react';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\r\nimport { useAuth } from '../hooks/useAuth';\r\nimport { useTheme } from '../hooks/useTheme';\r\nimport Icon from 'react-native-vector-icons/Ionicons';\r\n\r\n// Import screens\r\nimport LoginScreen from '../screens/LoginScreen';\r\nimport RegisterScreen from '../screens/RegisterScreen';\r\nimport HomeScreen from '../screens/HomeScreen';\r\nimport PatientListScreen from '../screens/PatientListScreen';\r\nimport AddPatientScreen from '../screens/AddPatientScreen';\r\nimport PatientDetailsScreen from '../screens/PatientDetailsScreen';\r\nimport SettingsScreen from '../screens/SettingsScreen';\r\n\r\nconst Stack = createStackNavigator();\r\nconst Tab = createBottomTabNavigator();\r\n\r\nconst AuthStack = () => (\r\n  <Stack.Navigator screenOptions={{ headerShown: false }}>\r\n    <Stack.Screen name=\"Login\" component={LoginScreen} />\r\n    <Stack.Screen name=\"Register\" component={RegisterScreen} />\r\n  </Stack.Navigator>\r\n);\r\n\r\nconst MainTabs = () => {\r\n  const { theme } = useTheme();\r\n\r\n  return (\r\n    <Tab.Navigator\r\n      screenOptions={({ route }) => ({\r\n        tabBarIcon: ({ focused, color, size }) => {\r\n          let iconName;\r\n\r\n          if (route.name === 'Home') {\r\n            iconName = focused ? 'home' : 'home-outline';\r\n          } else if (route.name === 'Patients') {\r\n            iconName = focused ? 'people' : 'people-outline';\r\n          } else if (route.name === 'Settings') {\r\n            iconName = focused ? 'settings' : 'settings-outline';\r\n          }\r\n\r\n          return <Icon name={iconName} size={size} color={color} />;\r\n        },\r\n      })}\r\n      tabBarOptions={{\r\n        activeTintColor: theme.colors.primary,\r\n        inactiveTintColor: theme.colors.text,\r\n        style: { backgroundColor: theme.colors.background },\r\n      }}\r\n    >\r\n      <Tab.Screen name=\"Home\" component={HomeScreen} />\r\n      <Tab.Screen name=\"Patients\" component={PatientListScreen} />\r\n      <Tab.Screen name=\"Settings\" component={SettingsScreen} />\r\n    </Tab.Navigator>\r\n  );\r\n};\r\n\r\nconst AppNavigator = () => {\r\n  const { user, loading } = useAuth();\r\n\r\n  if (loading) {\r\n    return null; // Or a loading screen\r\n  }\r\n\r\n  return (\r\n    <Stack.Navigator screenOptions={{ headerShown: false }}>\r\n      {user ? (\r\n        <>\r\n          <Stack.Screen name=\"Main\" component={MainTabs} />\r\n          <Stack.Screen name=\"AddPatient\" component={AddPatientScreen} />\r\n          <Stack.Screen name=\"PatientDetails\" component={PatientDetailsScreen} />\r\n        </>\r\n      ) : (\r\n        <Stack.Screen name=\"Auth\" component={AuthStack} />\r\n      )}\r\n    </Stack.Navigator>\r\n  );\r\n};\r\n\r\nexport default AppNavigator;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}