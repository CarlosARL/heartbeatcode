{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport * as Notifications from 'expo-notifications';\nimport Constants from 'expo-constants';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport function registerForPushNotificationsAsync() {\n  return _registerForPushNotificationsAsync.apply(this, arguments);\n}\nfunction _registerForPushNotificationsAsync() {\n  _registerForPushNotificationsAsync = _asyncToGenerator(function* () {\n    var token;\n    if (Constants.isDevice) {\n      var _yield$Notifications$ = yield Notifications.getPermissionsAsync(),\n        existingStatus = _yield$Notifications$.status;\n      var finalStatus = existingStatus;\n      if (existingStatus !== 'granted') {\n        var _yield$Notifications$2 = yield Notifications.requestPermissionsAsync(),\n          status = _yield$Notifications$2.status;\n        finalStatus = status;\n      }\n      if (finalStatus !== 'granted') {\n        alert('Failed to get push token for push notification!');\n        return;\n      }\n      token = (yield Notifications.getExpoPushTokenAsync()).data;\n    } else {\n      alert('Must use physical device for Push Notifications');\n    }\n    if (Platform.OS === 'android') {\n      Notifications.setNotificationChannelAsync('default', {\n        name: 'default',\n        importance: Notifications.AndroidImportance.MAX,\n        vibrationPattern: [0, 250, 250, 250],\n        lightColor: '#FF231F7C'\n      });\n    }\n    return token;\n  });\n  return _registerForPushNotificationsAsync.apply(this, arguments);\n}\nexport function setupNotifications(handleNotification) {\n  Notifications.setNotificationHandler({\n    handleNotification: function () {\n      var _handleNotification = _asyncToGenerator(function* () {\n        return {\n          shouldShowAlert: true,\n          shouldPlaySound: true,\n          shouldSetBadge: false\n        };\n      });\n      function handleNotification() {\n        return _handleNotification.apply(this, arguments);\n      }\n      return handleNotification;\n    }()\n  });\n  var notificationListener = Notifications.addNotificationReceivedListener(handleNotification);\n  var responseListener = Notifications.addNotificationResponseReceivedListener(function (response) {\n    console.log(response);\n  });\n  return function () {\n    Notifications.removeNotificationSubscription(notificationListener);\n    Notifications.removeNotificationSubscription(responseListener);\n  };\n}","map":{"version":3,"names":["Notifications","Constants","Platform","registerForPushNotificationsAsync","_registerForPushNotificationsAsync","apply","arguments","_asyncToGenerator","token","isDevice","_yield$Notifications$","getPermissionsAsync","existingStatus","status","finalStatus","_yield$Notifications$2","requestPermissionsAsync","alert","getExpoPushTokenAsync","data","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","setupNotifications","handleNotification","setNotificationHandler","_handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","notificationListener","addNotificationReceivedListener","responseListener","addNotificationResponseReceivedListener","response","console","log","removeNotificationSubscription"],"sources":["C:/Users/carlos/Desktop/Heartbeat/heartbeatcode/src/services/notifications.js"],"sourcesContent":["import * as Notifications from 'expo-notifications';\r\nimport Constants from 'expo-constants';\r\nimport { Platform } from 'react-native';\r\n\r\nexport async function registerForPushNotificationsAsync() {\r\n  let token;\r\n  if (Constants.isDevice) {\r\n    const { status: existingStatus } = await Notifications.getPermissionsAsync();\r\n    let finalStatus = existingStatus;\r\n    if (existingStatus !== 'granted') {\r\n      const { status } = await Notifications.requestPermissionsAsync();\r\n      finalStatus = status;\r\n    }\r\n    if (finalStatus !== 'granted') {\r\n      alert('Failed to get push token for push notification!');\r\n      return;\r\n    }\r\n    token = (await Notifications.getExpoPushTokenAsync()).data;\r\n  } else {\r\n    alert('Must use physical device for Push Notifications');\r\n  }\r\n\r\n  if (Platform.OS === 'android') {\r\n    Notifications.setNotificationChannelAsync('default', {\r\n      name: 'default',\r\n      importance: Notifications.AndroidImportance.MAX,\r\n      vibrationPattern: [0, 250, 250, 250],\r\n      lightColor: '#FF231F7C',\r\n    });\r\n  }\r\n\r\n  return token;\r\n}\r\n\r\nexport function setupNotifications(handleNotification) {\r\n  Notifications.setNotificationHandler({\r\n    handleNotification: async () => ({\r\n      shouldShowAlert: true,\r\n      shouldPlaySound: true,\r\n      shouldSetBadge: false,\r\n    }),\r\n  });\r\n\r\n  const notificationListener = Notifications.addNotificationReceivedListener(handleNotification);\r\n  const responseListener = Notifications.addNotificationResponseReceivedListener(response => {\r\n    console.log(response);\r\n  });\r\n\r\n  return () => {\r\n    Notifications.removeNotificationSubscription(notificationListener);\r\n    Notifications.removeNotificationSubscription(responseListener);\r\n  };\r\n}"],"mappings":";AAAA,OAAO,KAAKA,aAAa,MAAM,oBAAoB;AACnD,OAAOC,SAAS,MAAM,gBAAgB;AAAC,OAAAC,QAAA;AAGvC,gBAAsBC,iCAAiCA,CAAA;EAAA,OAAAC,kCAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AA4BtD,SAAAF,mCAAA;EAAAA,kCAAA,GAAAG,iBAAA,CA5BM,aAAmD;IACxD,IAAIC,KAAK;IACT,IAAIP,SAAS,CAACQ,QAAQ,EAAE;MACtB,IAAAC,qBAAA,SAAyCV,aAAa,CAACW,mBAAmB,CAAC,CAAC;QAA5DC,cAAc,GAAAF,qBAAA,CAAtBG,MAAM;MACd,IAAIC,WAAW,GAAGF,cAAc;MAChC,IAAIA,cAAc,KAAK,SAAS,EAAE;QAChC,IAAAG,sBAAA,SAAyBf,aAAa,CAACgB,uBAAuB,CAAC,CAAC;UAAxDH,MAAM,GAAAE,sBAAA,CAANF,MAAM;QACdC,WAAW,GAAGD,MAAM;MACtB;MACA,IAAIC,WAAW,KAAK,SAAS,EAAE;QAC7BG,KAAK,CAAC,iDAAiD,CAAC;QACxD;MACF;MACAT,KAAK,GAAG,OAAOR,aAAa,CAACkB,qBAAqB,CAAC,CAAC,EAAEC,IAAI;IAC5D,CAAC,MAAM;MACLF,KAAK,CAAC,iDAAiD,CAAC;IAC1D;IAEA,IAAIf,QAAQ,CAACkB,EAAE,KAAK,SAAS,EAAE;MAC7BpB,aAAa,CAACqB,2BAA2B,CAAC,SAAS,EAAE;QACnDC,IAAI,EAAE,SAAS;QACfC,UAAU,EAAEvB,aAAa,CAACwB,iBAAiB,CAACC,GAAG;QAC/CC,gBAAgB,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;QACpCC,UAAU,EAAE;MACd,CAAC,CAAC;IACJ;IAEA,OAAOnB,KAAK;EACd,CAAC;EAAA,OAAAJ,kCAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAED,OAAO,SAASsB,kBAAkBA,CAACC,kBAAkB,EAAE;EACrD7B,aAAa,CAAC8B,sBAAsB,CAAC;IACnCD,kBAAkB;MAAA,IAAAE,mBAAA,GAAAxB,iBAAA,CAAE;QAAA,OAAa;UAC/ByB,eAAe,EAAE,IAAI;UACrBC,eAAe,EAAE,IAAI;UACrBC,cAAc,EAAE;QAClB,CAAC;MAAA,CAAC;MAAA,SAJFL,kBAAkBA,CAAA;QAAA,OAAAE,mBAAA,CAAA1B,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAlBuB,kBAAkB;IAAA;EAKpB,CAAC,CAAC;EAEF,IAAMM,oBAAoB,GAAGnC,aAAa,CAACoC,+BAA+B,CAACP,kBAAkB,CAAC;EAC9F,IAAMQ,gBAAgB,GAAGrC,aAAa,CAACsC,uCAAuC,CAAC,UAAAC,QAAQ,EAAI;IACzFC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;EACvB,CAAC,CAAC;EAEF,OAAO,YAAM;IACXvC,aAAa,CAAC0C,8BAA8B,CAACP,oBAAoB,CAAC;IAClEnC,aAAa,CAAC0C,8BAA8B,CAACL,gBAAgB,CAAC;EAChE,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}