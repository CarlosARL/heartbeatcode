{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { createContext, useState, useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { lightTheme, darkTheme } from \"../theme\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var ThemeContext = createContext();\nexport var ThemeProvider = function ThemeProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isDarkMode = _useState2[0],\n    setIsDarkMode = _useState2[1];\n  var _useState3 = useState(lightTheme),\n    _useState4 = _slicedToArray(_useState3, 2),\n    theme = _useState4[0],\n    setTheme = _useState4[1];\n  useEffect(function () {\n    AsyncStorage.getItem('isDarkMode').then(function (value) {\n      if (value !== null) {\n        setIsDarkMode(JSON.parse(value));\n      }\n    });\n  }, []);\n  useEffect(function () {\n    setTheme(isDarkMode ? darkTheme : lightTheme);\n    AsyncStorage.setItem('isDarkMode', JSON.stringify(isDarkMode));\n  }, [isDarkMode]);\n  var toggleTheme = function toggleTheme() {\n    setIsDarkMode(!isDarkMode);\n  };\n  return _jsx(ThemeContext.Provider, {\n    value: {\n      theme: theme,\n      isDarkMode: isDarkMode,\n      toggleTheme: toggleTheme\n    },\n    children: children\n  });\n};","map":{"version":3,"names":["React","createContext","useState","useEffect","AsyncStorage","lightTheme","darkTheme","jsx","_jsx","ThemeContext","ThemeProvider","_ref","children","_useState","_useState2","_slicedToArray","isDarkMode","setIsDarkMode","_useState3","_useState4","theme","setTheme","getItem","then","value","JSON","parse","setItem","stringify","toggleTheme","Provider"],"sources":["C:/Users/carlos/Desktop/Heartbeat/heartbeatcode/src/contexts/ThemeContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { lightTheme, darkTheme } from '../theme';\r\n\r\nexport const ThemeContext = createContext();\r\n\r\nexport const ThemeProvider = ({ children }) => {\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n  const [theme, setTheme] = useState(lightTheme);\r\n\r\n  useEffect(() => {\r\n    // Load theme preference from storage\r\n    AsyncStorage.getItem('isDarkMode').then(value => {\r\n      if (value !== null) {\r\n        setIsDarkMode(JSON.parse(value));\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setTheme(isDarkMode ? darkTheme : lightTheme);\r\n    AsyncStorage.setItem('isDarkMode', JSON.stringify(isDarkMode));\r\n  }, [isDarkMode]);\r\n\r\n  const toggleTheme = () => {\r\n    setIsDarkMode(!isDarkMode);\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, isDarkMode, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,YAAY,MAAM,2CAA2C;AACpE,SAASC,UAAU,EAAEC,SAAS;AAAmB,SAAAC,GAAA,IAAAC,IAAA;AAEjD,OAAO,IAAMC,YAAY,GAAGR,aAAa,CAAC,CAAC;AAE3C,OAAO,IAAMS,aAAa,GAAG,SAAhBA,aAAaA,CAAAC,IAAA,EAAqB;EAAA,IAAfC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;EACtC,IAAAC,SAAA,GAAoCX,QAAQ,CAAC,KAAK,CAAC;IAAAY,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA5CG,UAAU,GAAAF,UAAA;IAAEG,aAAa,GAAAH,UAAA;EAChC,IAAAI,UAAA,GAA0BhB,QAAQ,CAACG,UAAU,CAAC;IAAAc,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAvCE,KAAK,GAAAD,UAAA;IAAEE,QAAQ,GAAAF,UAAA;EAEtBhB,SAAS,CAAC,YAAM;IAEdC,YAAY,CAACkB,OAAO,CAAC,YAAY,CAAC,CAACC,IAAI,CAAC,UAAAC,KAAK,EAAI;MAC/C,IAAIA,KAAK,KAAK,IAAI,EAAE;QAClBP,aAAa,CAACQ,IAAI,CAACC,KAAK,CAACF,KAAK,CAAC,CAAC;MAClC;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAENrB,SAAS,CAAC,YAAM;IACdkB,QAAQ,CAACL,UAAU,GAAGV,SAAS,GAAGD,UAAU,CAAC;IAC7CD,YAAY,CAACuB,OAAO,CAAC,YAAY,EAAEF,IAAI,CAACG,SAAS,CAACZ,UAAU,CAAC,CAAC;EAChE,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;EAEhB,IAAMa,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS;IACxBZ,aAAa,CAAC,CAACD,UAAU,CAAC;EAC5B,CAAC;EAED,OACER,IAAA,CAACC,YAAY,CAACqB,QAAQ;IAACN,KAAK,EAAE;MAAEJ,KAAK,EAALA,KAAK;MAAEJ,UAAU,EAAVA,UAAU;MAAEa,WAAW,EAAXA;IAAY,CAAE;IAAAjB,QAAA,EAC9DA;EAAQ,CACY,CAAC;AAE5B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}